{%extends "components/includes/base.html"%}
{%block content%}

<div class="container">
	<div class="row" style="margin-top:50px;">
		<div class="col-xs-9 col-sm-9 col-md-9 col-lg-9 text-center">
    <div id="viz">  
    </div>
              <a class="btn btn-default download" href="javascript:(function () { var e = document.createElement('script'); if (window.location.protocol === 'https:') { e.setAttribute('src', 'https://rawgit.com/NYTimes/svg-crowbar/gh-pages/svg-crowbar.js'); } else { e.setAttribute('src', 'http://nytimes.github.com/svg-crowbar/svg-crowbar.js'); } e.setAttribute('class', 'svg-crowbar'); document.body.appendChild(e); })();"><!--⤋--><big>⇩</big> Download</a>

    </div>
		<div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 text-center">
      <div id="details"></div>
      <div>
        <table class="table table-condensed table-hover">
          <thead>
            <tr>
              <th></th><th></th>
            </tr>
          </thead>
          <tbody id="info" style="text-align:left">
          </tbody>
        </table>
      </div>
    </div>
	</div>
</div>
<script src="/js/d3.v3.min.js"> </script>
<script>
d = {{queries|json}};

// set up SVG for D3
var width  = 960,
    height = 500,
    colors = d3.scale.category10();

var svg = d3.select('#viz')
  .append('svg')
  .attr('width', width)
  .attr('height', height);
var nodes = [],
  lastNodeId = 0,
  links = [];
// set up initial nodes and links
//  - nodes are known by 'id', not by index in array.
//  - reflexive edges are indicated on the node (as a bold black circle).
//  - links are always source < target; edge directions are set by 'left' and 'right'.

// init D3 force layout
var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .size([width, height])
    .linkDistance(150)
    .charge(-500)
    .on('tick', tick)

// define arrow markers for graph links
svg.append('svg:defs').append('svg:marker')
    .attr('id', 'end-arrow')
    .attr('viewBox', '0 -5 10 10')
    .attr('refX', 6)
    .attr('markerWidth', 3)
    .attr('markerHeight', 3)
    .attr('orient', 'auto')
  .append('svg:path')
    .attr('d', 'M0,-5L10,0L0,5')
    .attr('fill', '#000');

svg.append('svg:defs').append('svg:marker')
    .attr('id', 'start-arrow')
    .attr('viewBox', '0 -5 10 10')
    .attr('refX', 4)
    .attr('markerWidth', 3)
    .attr('markerHeight', 3)
    .attr('orient', 'auto')
  .append('svg:path')
    .attr('d', 'M10,-5L0,0L10,5')
    .attr('fill', '#000');

// line displayed when dragging new nodes
var drag_line = svg.append('svg:path')
  .attr('class', 'link dragline hidden')
  .attr('d', 'M0,0L0,0');

// handles to link and node element groups
var path = svg.append('svg:g').selectAll('path'),
    circle = svg.append('svg:g').selectAll('g').call(force.drag);

// mouse event vars
var selected_node = null,
    selected_link = null,
    mousedown_link = null,
    mousedown_node = null,
    mouseup_node = null;

function resetMouseVars() {
  mousedown_node = null;
  mouseup_node = null;
  mousedown_link = null;
}

// update force layout (called automatically each iteration)
function tick() {
  // draw directed edges with proper padding from node centers
  path.attr('d', function(d) {
    var deltaX = d.target.x - d.source.x +1,
        deltaY = d.target.y - d.source.y +1,
        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),
        normX = deltaX / dist,
        normY = deltaY / dist,
        sourcePadding = d.left ? 17 : 12,
        targetPadding = d.right ? 17 : 12,
        sourceX = d.source.x + (sourcePadding * normX),
        sourceY = d.source.y + (sourcePadding * normY),
        targetX = d.target.x - (targetPadding * normX),
        targetY = d.target.y - (targetPadding * normY);
    return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;
  });

  circle.attr('transform', function(d) {
    return 'translate(' + d.x + ',' + d.y + ')';
  });
}

function linkExist(s, t){
  for(var i=0; i<links.length; i++){
    var link = links[i];
    if((link.source.index == s && link.target.index == t) || (link.source.index == t && link.target.index == s)){
      return i;
    }
  }
  return -1;
}

// update graph (called when needed)
function restart() {
  // path (link) group
  path = path.data(links);

  // update existing links
  path.classed('selected', function(d) { return d === selected_link; })
    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })
    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; });


  // add new links
  path.enter().append('svg:path')
    .attr('class', 'link')
    .classed('selected', function(d) { return d === selected_link; })
    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })
    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; })
    .on('mousedown', function(d) {
      if(d3.event.ctrlKey) return;

      // select link
      mousedown_link = d;
      if(mousedown_link === selected_link) selected_link = null;
      else selected_link = mousedown_link;
      selected_node = null;
      restart();
    });

  // remove old links
  path.exit().remove();


  // circle (node) group
  // NB: the function arg is crucial here! nodes are known by id, not by index!
  console.log(circle);
  circle = circle.data(nodes, function(d) {return d.id; });
  console.log(circle);

  // update existing nodes (reflexive & selected visual states)
  circle.selectAll('circle')
  .style('fill', colors(1)) 
  .classed('reflexive', function(d) { return d.reflexive; })
  .attr("data-uri", function(d){return d.uri})
  .attr("data-name", function(d){return d.id})
  .on("click", function(){
    var myUri = d3.select(this).attr("data-uri");
    d3.select("#info").selectAll("tr").remove();
    d3.select("#details").html("<a href='/view/"+myUri+"'><h3>"+d3.select(this).attr("data-name")+"</h3></a>");
    d3.json("/view/"+myUri, function(data){
      var dict = data.main.map(
        function(d){
          l = d.predicateLabel.value;
          if(d.predicatePreferedLabel != null && d.predicatePreferedLabel.value != null ){
            l = d.predicatePreferedLabel.value;
          }
          return {uri: d.predicate.value, label: l};
        }
        );
      var posName = function(p){return dict.map(function(x){return x.uri}).indexOf(p)};

      tr = d3.select("#info")
      .selectAll("p")
      .data(data.uridata)
      .enter()
      .append("tr")
      .filter(function(j){
        return posName(j.p.mirroredUri) >= 0 && j.o.type != "uri"
      });
      tr.append("td").html(function(d){return dict[posName(d.p.mirroredUri)]["label"]});
      tr.append("td").html(function(d){return d.o.value});
      var sourcePos = nodes.map(function(x){return x.uri}).indexOf(myUri);
      d3.json("/viz/"+myUri, function(newData){
        for(var i =0; i < newData.main.length; i++){
          var datum = newData.main[i];
          var l = datum.sName.value,
              uri = datum.s.mirroredUri;
          targetPos = nodes.map(function(x){return x.uri}).indexOf(uri);
          if(targetPos<0){
            nodes.push({id: l, uri: datum.s.mirroredUri, label: l});
            targetPos = nodes.map(function(x){return x.uri}).indexOf(uri);
          }
          if(linkExist(sourcePos, targetPos) < 0){
            links.push({source: sourcePos, target: targetPos, value: 1, weight: 1});
          }

        }
        restart();
      })
    });
});

  // add new nodes
  var g = circle.enter().append('svg:g').call(force.drag);

  g.append('svg:circle')
    .attr('class', 'node')
    .attr('r', 12)
    .style('fill', colors(1))
    .classed('reflexive', function(d) { return d.reflexive; })
    .on('mouseover', function(d) {
      if(!mousedown_node || d === mousedown_node) return;
      // enlarge target node
      d3.select(this).attr('transform', 'scale(1.1)');
    })
    .on('mouseout', function(d) {
      if(!mousedown_node || d === mousedown_node) return;
      // unenlarge target node
      d3.select(this).attr('transform', '');
    })
    .on('mousedown', function(d) {
      if(d3.event.ctrlKey) return;

      // select node
      mousedown_node = d;
      if(mousedown_node === selected_node) selected_node = null;
      else selected_node = mousedown_node;
      selected_link = null;

      restart();
    })
    .on('mouseup', function(d) {
      if(!mousedown_node) return;

      // needed by FF
      drag_line
        .classed('hidden', true)
        .style('marker-end', '');

      // check for drag-to-self
      mouseup_node = d;
      if(mouseup_node === mousedown_node) { resetMouseVars(); return; }

      // unenlarge target node
      d3.select(this).attr('transform', '');

      // add link to graph (update if exists)
      // NB: links are strictly source < target; arrows separately specified by booleans
      var source, target, direction;
      if(mousedown_node.id < mouseup_node.id) {
        source = mousedown_node;
        target = mouseup_node;
        direction = 'right';
      } else {
        source = mouseup_node;
        target = mousedown_node;
        direction = 'left';
      }

      var link;
      link = links.filter(function(l) {
        return (l.source === source && l.target === target);
      })[0];

      if(link) {
        link[direction] = true;
      } else {
        link = {source: source, target: target, left: false, right: false};
        link[direction] = true;
        links.push(link);
      }

      // select new link
      selected_link = link;
      selected_node = null;
      restart();
    });

  // show node IDs
  g.append('svg:text')
      .attr('x', 0)
      .attr('y', 4)
      .attr('class', 'id')
      .text(function(d) { return d.id; });

  // remove old nodes
  circle.exit().remove();

  // set the graph in motion
  force.start();
}


nodes.push({id: "{{first.label.sName.value}}", uri: "{{"/".join(args)}}", group: 1});
	
for(var i =0; i < d.main.length; i++){
	var p = d.main[i].sName.value;
	if(nodes.map(function(d){return d.name}).indexOf(p) < 0){
		nodes.push({id: p, uri: d.main[i].s.mirroredUri, group: 1});
		links.push({source: 0, target: nodes.map(function(d){return d.id}).indexOf(p), value: 1, left: false, right: false});
	}
}
restart();
</script>
{%endblock%}
